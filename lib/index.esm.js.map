{"version":3,"file":"index.esm.js","sources":["../src/util/to-buffer.js","../src/publickey.js","../src/account.js","../src/bpf-loader-deprecated.js","../src/layout.js","../src/util/shortvec-encoding.js","../src/message.js","../src/transaction.js","../src/sysvar.js","../src/fee-calculator.js","../src/nonce-account.js","../src/timing.js","../src/util/sleep.js","../src/util/promise-timeout.js","../src/agent-manager.js","../src/connection.js","../src/util/send-and-confirm-transaction.js","../src/instruction.js","../src/system-program.js","../src/loader.js","../src/bpf-loader.js","../src/stake-program.js","../src/secp256k1-program.js","../src/validator-info.js","../src/vote-account.js","../src/util/send-and-confirm-raw-transaction.js","../src/util/cluster.js","../src/index.js"],"sourcesContent":["// @flow\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\n//$FlowFixMe\nlet naclLowLevel = nacl.lowlevel;\n\ntype PublicKeyNonce = [PublicKey, number]; // This type exists to workaround an esdoc parse error\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n      if (decoded.length != 32) {\n        throw new Error(`Invalid public key input`);\n      }\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new Error(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, Buffer.from(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(null, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKeyNonce> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n}\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0,\n  0x4a0e,\n  0x1b27,\n  0xc4ee,\n  0xe478,\n  0xad2f,\n  0x1806,\n  0x2f43,\n  0xd7a7,\n  0x3dfb,\n  0x0099,\n  0x2b4d,\n  0xdf0b,\n  0x4fc1,\n  0x2480,\n  0x2b83,\n]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\nimport {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: Object, fields: Object): number {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport bs58 from 'bs58';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\n\n/**\n * The message header, identifying signed and read-only account\n *\n * @typedef {Object} MessageHeader\n * @property {number} numRequiredSignatures The number of signatures required for this message to be considered valid. The\n * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n * @property {number} numReadonlySignedAccounts: The last `numReadonlySignedAccounts` of the signed keys are read-only accounts\n * @property {number} numReadonlyUnsignedAccounts The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts\n */\nexport type MessageHeader = {\n  numRequiredSignatures: number,\n  numReadonlySignedAccounts: number,\n  numReadonlyUnsignedAccounts: number,\n};\n\n/**\n * An instruction to execute by a program\n *\n * @typedef {Object} CompiledInstruction\n * @property {number} programIdIndex Index into the transaction keys array indicating the program account that executes this instruction\n * @property {number[]} accounts Ordered indices into the transaction keys array indicating which accounts to pass to the program\n * @property {string} data The program input data encoded as base 58\n */\nexport type CompiledInstruction = {\n  programIdIndex: number,\n  accounts: number[],\n  data: string,\n};\n\n/**\n * Message constructor arguments\n *\n * @typedef {Object} MessageArgs\n * @property {MessageHeader} header The message header, identifying signed and read-only `accountKeys`\n * @property {string[]} accounts All the account keys used by this transaction\n * @property {Blockhash} recentBlockhash The hash of a recent ledger block\n * @property {CompiledInstruction[]} instructions Instructions that will be executed in sequence and committed in one atomic transaction if all succeed.\n */\ntype MessageArgs = {\n  header: MessageHeader,\n  accountKeys: string[],\n  recentBlockhash: Blockhash,\n  instructions: CompiledInstruction[],\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => key.toBuffer()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIdIndex = byteArray.shift();\n      const accountCount = shortvec.decodeLength(byteArray);\n      instruction.accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = byteArray.slice(0, dataLength);\n      instruction.data = bs58.encode(Buffer.from(data));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport type {CompiledInstruction} from './message';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n *\n * @typedef {Object} AccountMeta\n * @property {PublicKey} pubkey An account's public key\n * @property {boolean} isSigner True if an instruction requires a transaction signature matching `pubkey`\n * @property {boolean} isWritable True if the `pubkey` can be loaded as a read-write account.\n */\nexport type AccountMeta = {\n  pubkey: PublicKey,\n  isSigner: boolean,\n  isWritable: boolean,\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {|\n  keys?: Array<AccountMeta>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Configuration object for Transaction.serialize()\n *\n * @typedef {Object} SerializeConfig\n * @property {boolean|undefined} requireAllSignatures Require all transaction signatures be present (default: true)\n * @property {boolean|undefined} verifySignatures Verify provided signatures (default: true)\n */\nexport type SerializeConfig = {\n  requireAllSignatures?: boolean,\n  verifySignatures?: boolean,\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property {?Blockhash} recentBlockhash A recent blockhash\n * @property {?PublicKey} feePayer The transaction fee payer\n * @property {?Array<SignaturePubkeyPair>} signatures One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  nonceInfo?: NonceInformation | null,\n  feePayer?: PublicKey | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * NonceInformation to be used to build a Transaction.\n *\n * @typedef {Object} NonceInformation\n * @property {Blockhash} nonce The current Nonce blockhash\n * @property {TransactionInstruction} nonceInstruction AdvanceNonceAccount Instruction\n */\ntype NonceInformation = {|\n  nonce: Blockhash,\n  nonceInstruction: TransactionInstruction,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer: ?PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash: ?Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo: ?NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @private\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @private\n   */\n  _partialSign(message: Message, ...signers: Array<Account>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, signature);\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @private\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @private\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @private\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","// @flow\nimport {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @private\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n */\nexport type FeeCalculator = {\n  lamportsPerSignature: number,\n};\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @private\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    nonceAccount.authorizedPubkey = new PublicKey(\n      nonceAccount.authorizedPubkey,\n    );\n    nonceAccount.nonce = new PublicKey(nonceAccount.nonce).toString();\n    return nonceAccount;\n  }\n}\n","// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @ignore\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @ignore\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nexport function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: TimeoutID;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","// @flow\n\nimport http from 'http';\nimport https from 'https';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: http.Agent | https.Agent;\n  _activeRequests = 0;\n  _destroyTimeout: TimeoutID | null = null;\n  _useHttps: boolean;\n\n  static _newAgent(useHttps: boolean): http.Agent | https.Agent {\n    const options = {keepAlive: true, maxSockets: 25};\n    if (useHttps) {\n      return new https.Agent(options);\n    } else {\n      return new http.Agent(options);\n    }\n  }\n\n  constructor(useHttps?: boolean) {\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  requestStart(): http.Agent | https.Agent {\n    // $FlowExpectedError - Don't manage agents in the browser\n    if (process.browser) return;\n\n    this._activeRequests++;\n    clearTimeout(this._destroyTimeout);\n    this._destroyTimeout = null;\n    return this._agent;\n  }\n\n  requestEnd() {\n    // $FlowExpectedError - Don't manage agents in the browser\n    if (process.browser) return;\n\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent(this._useHttps);\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n","// @flow\n\nimport assert from 'assert';\nimport bs58 from 'bs58';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\nimport {AgentManager} from './agent-manager';\n\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype TokenAccountsFilter =\n  | {|\n      mint: PublicKey,\n    |}\n  | {|\n      programId: PublicKey,\n    |};\n\n/**\n * Extra contextual information for RPC responses\n *\n * @typedef {Object} Context\n * @property {number} slot\n */\ntype Context = {\n  slot: number,\n};\n\n/**\n * Options for sending transactions\n *\n * @typedef {Object} SendOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type SendOptions = {\n  skipPreflight?: boolean,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for confirming transactions\n *\n * @typedef {Object} ConfirmOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} commitment desired commitment level\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type ConfirmOptions = {\n  skipPreflight?: boolean,\n  commitment?: Commitment,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n *\n * @typedef {Object} ConfirmedSignaturesForAddress2Options\n * @property {TransactionSignature | undefined} before start searching backwards from this transaction signature.\n *               If not provided the search starts from the highest max confirmed block.\n * @property {number | undefined} limit maximum transaction signatures to return (between 1 and 1,000, default: 1,000).\n *\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  before?: TransactionSignature,\n  limit?: number,\n};\n\n/**\n * RPC Response with extra contextual information\n *\n * @typedef {Object} RpcResponseAndContext\n * @property {Context} context\n * @property {T} value response\n */\ntype RpcResponseAndContext<T> = {\n  context: Context,\n  value: T,\n};\n\n/**\n * @private\n */\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nfunction notificationResultAndContext(resultDescription: any) {\n  return struct({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'max':    Query the most recent block which has been finalized by the cluster\n *   'recent': Query the most recent block which has reached 1 confirmation by the connected node\n *   'root':   Query the most recent block which has been rooted by the connected node\n *   'single': Query the most recent block which has reached 1 confirmation by the cluster\n *   'singleGossip': Query the most recent block which has reached 1 confirmation according to votes seen in gossip\n * </pre>\n *\n * @typedef {'max' | 'recent' | 'root' | 'single' | 'singleGossip'} Commitment\n */\nexport type Commitment = 'max' | 'recent' | 'root' | 'single' | 'singleGossip';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n *\n * @typedef {'circulating' | 'nonCirculating'} LargestAccountsFilter\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n *\n * @typedef {Object} GetLargestAccountsConfig\n * @property {Commitment|undefined} commitment The level of commitment desired\n * @property {LargestAccountsFilter|undefined} filter Filter largest accounts by whether they are part of the circulating supply\n */\ntype GetLargestAccountsConfig = {\n  commitment: ?Commitment,\n  filter: ?LargestAccountsFilter,\n};\n\n/**\n * Configuration object for changing query behavior\n *\n * @typedef {Object} SignatureStatusConfig\n * @property {boolean} searchTransactionHistory enable searching status history, not needed for recent transactions\n */\nexport type SignatureStatusConfig = {\n  searchTransactionHistory: boolean,\n};\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string|null} gossip Gossip network address for the node\n * @property {string|null} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n * @property {string|null} version Software version of the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string | null,\n  tpu: string | null,\n  rpc: string | null,\n  version: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  activatedStake: number,\n  epochVoteAccount: boolean,\n  epochCredits: Array<[number, number, number]>,\n  commission: number,\n  lastVote: number,\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\ntype VoteAccountStatus = {\n  current: Array<VoteAccountInfo>,\n  delinquent: Array<VoteAccountInfo>,\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n *\n * @typedef {Object} InflationGovernor\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} taper\n * @property {number} terminal\n */\ntype InflationGovernor = {\n  foundation: number,\n  foundationTerm: number,\n  initial: number,\n  taper: number,\n  terminal: number,\n};\n\nconst GetInflationGovernorResult = struct({\n  foundation: 'number',\n  foundationTerm: 'number',\n  initial: 'number',\n  taper: 'number',\n  terminal: 'number',\n});\n\n/**\n * Information about the current epoch\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n * @property {number} blockHeight\n * @property {number} transactionCount\n */\ntype EpochInfo = {\n  epoch: number,\n  slotIndex: number,\n  slotsInEpoch: number,\n  absoluteSlot: number,\n  blockHeight: number | null,\n  transactionCount: number | null,\n};\n\nconst GetEpochInfoResult = struct({\n  epoch: 'number',\n  slotIndex: 'number',\n  slotsInEpoch: 'number',\n  absoluteSlot: 'number',\n  blockHeight: 'number?',\n  transactionCount: 'number?',\n});\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slotsPerEpoch The maximum number of slots in each epoch\n * @property {number} leaderScheduleSlotOffset The number of slots before beginning of an epoch to calculate a leader schedule for that epoch\n * @property {boolean} warmup Indicates whether epochs start short and grow\n * @property {number} firstNormalEpoch The first epoch with `slotsPerEpoch` slots\n * @property {number} firstNormalSlot The first slot of `firstNormalEpoch`\n */\ntype EpochSchedule = {\n  slotsPerEpoch: number,\n  leaderScheduleSlotOffset: number,\n  warmup: boolean,\n  firstNormalEpoch: number,\n  firstNormalSlot: number,\n};\n\nconst GetEpochScheduleResult = struct({\n  slotsPerEpoch: 'number',\n  leaderScheduleSlotOffset: 'number',\n  warmup: 'boolean',\n  firstNormalEpoch: 'number',\n  firstNormalSlot: 'number',\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n *\n * @typedef {Object} LeaderSchedule\n */\ntype LeaderSchedule = {\n  [address: string]: number[],\n};\n\nconst GetLeaderScheduleResult = struct.record([\n  'string',\n  'any', // validating struct.array(['number']) is extremely slow\n]);\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = struct.union(['null', 'object']);\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = struct({err: TransactionErrorResult});\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst Version = struct.pick({\n  'solana-core': 'string',\n  'feature-set': 'number?',\n});\n\ntype SimulatedTransactionResponse = {\n  err: TransactionError | string | null,\n  logs: Array<string> | null,\n};\n\nconst SimulatedTransactionResponseValidator = jsonRpcResultAndContext(\n  struct.pick({\n    err: struct.union(['null', 'object', 'string']),\n    logs: struct.union(['null', struct.array(['string'])]),\n  }),\n);\n\ntype ParsedInnerInstruction = {\n  index: number,\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n};\n\ntype TokenBalance = {\n  accountIndex: number,\n  mint: string,\n  uiTokenAmount: TokenAmount,\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<ParsedInnerInstruction>} innerInstructions An array of cross program invoked parsed instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ParsedConfirmedTransactionMeta = {\n  fee: number,\n  innerInstructions?: ParsedInnerInstruction[],\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  logMessages?: Array<string>,\n  preTokenBalances?: Array<TokenBalance>,\n  postTokenBalances?: Array<TokenBalance>,\n  err: TransactionError | null,\n};\n\ntype CompiledInnerInstruction = {\n  index: number,\n  instructions: CompiledInstruction[],\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<CompiledInnerInstruction>} innerInstructions An array of cross program invoked instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {object|null} err The error result of transaction processing\n */\ntype ConfirmedTransactionMeta = {\n  fee: number,\n  innerInstructions?: CompiledInnerInstruction[],\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  logMessages?: Array<string>,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {Transaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n */\ntype ConfirmedTransaction = {\n  slot: number,\n  transaction: Transaction,\n  meta: ConfirmedTransactionMeta | null,\n};\n\n/**\n * A partially decoded transaction instruction\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {PublicKey} accounts Indicates if the account signed the transaction\n * @property {string} data Raw base-58 instruction data\n */\ntype PartiallyDecodedInstruction = {|\n  programId: PublicKey,\n  accounts: Array<PublicKey>,\n  data: string,\n|};\n\n/**\n * A parsed transaction message account\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {boolean} signer Indicates if the account signed the transaction\n * @property {boolean} writable Indicates if the account is writable for this transaction\n */\ntype ParsedMessageAccount = {\n  pubkey: PublicKey,\n  signer: boolean,\n  writable: boolean,\n};\n\n/**\n * A parsed transaction instruction\n *\n * @typedef {Object} ParsedInstruction\n * @property {string} program Name of the program for this instruction\n * @property {PublicKey} programId ID of the program for this instruction\n * @property {any} parsed Parsed instruction info\n */\ntype ParsedInstruction = {|\n  program: string,\n  programId: PublicKey,\n  parsed: any,\n|};\n\n/**\n * A parsed transaction message\n *\n * @typedef {Object} ParsedMessage\n * @property {Array<ParsedMessageAccount>} accountKeys Accounts used in the instructions\n * @property {Array<ParsedInstruction | PartiallyDecodedInstruction>} instructions The atomically executed instructions for the transaction\n * @property {string} recentBlockhash Recent blockhash\n */\ntype ParsedMessage = {\n  accountKeys: ParsedMessageAccount[],\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n  recentBlockhash: string,\n};\n\n/**\n * A parsed transaction\n *\n * @typedef {Object} ParsedTransaction\n * @property {Array<string>} signatures Signatures for the transaction\n * @property {ParsedMessage} message Message of the transaction\n */\ntype ParsedTransaction = {\n  signatures: Array<string>,\n  message: ParsedMessage,\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {ParsedTransaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n */\ntype ParsedConfirmedTransaction = {\n  slot: number,\n  transaction: ParsedTransaction,\n  meta: ParsedConfirmedTransactionMeta | null,\n};\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<object>} transactions Vector of transactions and status metas\n * @property {Array<object>} rewards Vector of block rewards\n */\ntype ConfirmedBlock = {\n  blockhash: Blockhash,\n  previousBlockhash: Blockhash,\n  parentSlot: number,\n  transactions: Array<{\n    transaction: Transaction,\n    meta: ConfirmedTransactionMeta | null,\n  }>,\n  rewards: Array<{\n    pubkey: string,\n    lamports: number,\n    postBalance: number | null,\n    rewardType: string | null,\n  }>,\n};\n\n/**\n * A performance sample\n *\n * @typedef {Object} PerfSample\n * @property {number} slot Slot number of sample\n * @property {number} numTransactions Number of transactions in a sample window\n * @property {number} numSlots Number of slots in a sample window\n * @property {number} samplePeriodSecs Sample window in seconds\n */\ntype PerfSample = {\n  slot: number,\n  numTransactions: number,\n  numSlots: number,\n  samplePeriodSecs: number,\n};\n\nfunction createRpcRequest(url: string, useHttps: boolean): RpcRequest {\n  const agentManager = new AgentManager(useHttps);\n\n  const server = jayson(async (request, callback) => {\n    const agent = agentManager.requestStart();\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res = {};\n      let waitTime = 500;\n      for (;;) {\n        res = await fetch(url, options);\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager.requestEnd();\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetInflationGovernorResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochScheduleResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceAndContextRpcResult = jsonRpcResultAndContext('number?');\n\n/**\n * Expected JSON RPC response for the \"getBlockTime\" message\n */\nconst GetBlockTimeRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: struct.union(['null', 'number', 'undefined']),\n});\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number',\n});\n\n/**\n * Supply\n *\n * @typedef {Object} Supply\n * @property {number} total Total supply in lamports\n * @property {number} circulating Circulating supply in lamports\n * @property {number} nonCirculating Non-circulating supply in lamports\n * @property {Array<PublicKey>} nonCirculatingAccounts List of non-circulating account addresses\n */\ntype Supply = {\n  total: number,\n  circulating: number,\n  nonCirculating: number,\n  nonCirculatingAccounts: Array<PublicKey>,\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  struct({\n    total: 'number',\n    circulating: 'number',\n    nonCirculating: 'number',\n    nonCirculatingAccounts: struct.array(['string']),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n *\n * @typedef {Object} TokenAmount\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAmount = {\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = struct.object({\n  amount: 'string',\n  uiAmount: 'number',\n  decimals: 'number',\n});\n\n/**\n * Token address and balance.\n *\n * @typedef {Object} TokenAccountBalancePair\n * @property {PublicKey} address Address of the token account\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAccountBalancePair = {\n  address: PublicKey,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.pick({\n      address: 'string',\n      amount: 'string',\n      uiAmount: 'number',\n      decimals: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountBalance\" message\n */\nconst GetTokenAccountBalance = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenSupply\" message\n */\nconst GetTokenSupplyRpcResult = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: ['string', struct.literal('base64')],\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: struct.pick({\n          program: 'string',\n          parsed: 'any',\n          space: 'number',\n        }),\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Pair of an account address and its balance\n *\n * @typedef {Object} AccountBalancePair\n * @property {PublicKey} address\n * @property {number} lamports\n */\ntype AccountBalancePair = {\n  address: PublicKey,\n  lamports: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct({\n      lamports: 'number',\n      address: 'string',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVersion\" message\n */\nconst GetVersionRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: Version,\n});\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst ParsedAccountInfoResult = struct.object({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: struct.union([\n    ['string', struct.literal('base64')],\n    struct.pick({\n      program: 'string',\n      parsed: 'any',\n      space: 'number',\n    }),\n  ]),\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst StakeActivationResult = struct.object({\n  state: struct.union([\n    struct.literal('active'),\n    struct.literal('inactive'),\n    struct.literal('activating'),\n    struct.literal('deactivating'),\n  ]),\n  active: 'number',\n  inactive: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoAndContextRpcResult = jsonRpcResultAndContext(\n  struct.union(['null', AccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message with jsonParsed param\n */\nconst GetParsedAccountInfoResult = jsonRpcResultAndContext(\n  struct.union(['null', ParsedAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getStakeActivation\" message with jsonParsed param\n */\nconst GetStakeActivationResult = jsonRpcResult(StakeActivationResult);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message\n */\nconst GetConfirmedSignaturesForAddressRpcResult = jsonRpcResult(\n  struct.array(['string']),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  struct.array([\n    struct({\n      signature: 'string',\n      slot: 'number',\n      err: TransactionErrorResult,\n      memo: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: AccountInfoResult,\n});\n\n/**\n * @private\n */\nconst ParsedProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: ParsedAccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @private\n */\nconst SlotInfoResult = struct({\n  parent: 'number',\n  slot: 'number',\n  root: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = struct({\n  subscription: 'number',\n  result: SlotInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(SignatureStatusResult),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = struct({\n  subscription: 'number',\n  result: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetParsedProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ParsedProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getSlot\" message\n */\nconst GetSlot = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\nconst GetSlotLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      pubkey: 'string',\n      gossip: struct.union(['null', 'string']),\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n      version: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  struct({\n    current: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n    delinquent: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.union([\n      'null',\n      struct.pick({\n        slot: 'number',\n        confirmations: struct.union(['number', 'null']),\n        err: TransactionErrorResult,\n      }),\n    ]),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult('number');\n\n/**\n * @private\n */\nconst ConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array(['string']),\n    header: struct({\n      numRequiredSignatures: 'number',\n      numReadonlySignedAccounts: 'number',\n      numReadonlyUnsignedAccounts: 'number',\n    }),\n    instructions: struct.array([\n      struct({\n        accounts: struct.array(['number']),\n        data: 'string',\n        programIdIndex: 'number',\n      }),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ParsedConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array([\n      struct({\n        pubkey: 'string',\n        signer: 'boolean',\n        writable: 'boolean',\n      }),\n    ]),\n    instructions: struct.array([\n      struct.union([\n        struct({\n          accounts: struct.array(['string']),\n          data: 'string',\n          programId: 'string',\n        }),\n        struct({\n          parsed: 'any',\n          program: 'string',\n          programId: 'string',\n        }),\n      ]),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    innerInstructions: struct.union([\n      struct.array([\n        struct({\n          index: 'number',\n          instructions: struct.array([\n            struct({\n              accounts: struct.array(['number']),\n              data: 'string',\n              programIdIndex: 'number',\n            }),\n          ]),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n    logMessages: struct.union([struct.array(['string']), 'null', 'undefined']),\n    preTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    postTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n  }),\n]);\n/**\n * @private\n */\nconst ParsedConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    innerInstructions: struct.union([\n      struct.array([\n        struct({\n          index: 'number',\n          instructions: struct.array([\n            struct.union([\n              struct({\n                accounts: struct.array(['string']),\n                data: 'string',\n                programId: 'string',\n              }),\n              struct({\n                parsed: 'any',\n                program: 'string',\n                programId: 'string',\n              }),\n            ]),\n          ]),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n    logMessages: struct.union([struct.array(['string']), 'null', 'undefined']),\n    preTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    postTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      blockhash: 'string',\n      previousBlockhash: 'string',\n      parentSlot: 'number',\n      transactions: struct.array([\n        struct({\n          transaction: ConfirmedTransactionResult,\n          meta: ConfirmedTransactionMetaResult,\n        }),\n      ]),\n      rewards: struct.union([\n        'undefined',\n        struct.array([\n          struct({\n            pubkey: 'string',\n            lamports: 'number',\n            postBalance: struct.union(['number', 'undefined']),\n            rewardType: struct.union(['string', 'undefined']),\n          }),\n        ]),\n      ]),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ConfirmedTransactionResult,\n      meta: ConfirmedTransactionMetaResult,\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ParsedConfirmedTransactionResult,\n      meta: ParsedConfirmedTransactionMetaResult,\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  struct({\n    blockhash: 'string',\n    feeCalculator: struct({\n      lamportsPerSignature: 'number',\n    }),\n  }),\n);\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      slot: 'number',\n      numTransactions: 'number',\n      numSlots: 'number',\n      samplePeriodSecs: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  struct.union([\n    'null',\n    struct({\n      feeCalculator: struct({\n        lamportsPerSignature: 'number',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information about the latest slot being processed by a node\n *\n * @typedef {Object} SlotInfo\n * @property {number} slot Currently processing slot\n * @property {number} parent Parent of the current slot\n * @property {number} root The root block of the current slot's fork\n */\ntype SlotInfo = {\n  slot: number,\n  parent: number,\n  root: number,\n};\n\n/**\n * Parsed account data\n *\n * @typedef {Object} ParsedAccountData\n * @property {string} program Name of the program that owns this account\n * @property {any} parsed Parsed account data\n * @property {number} space Space used by account data\n */\ntype ParsedAccountData = {\n  program: string,\n  parsed: any,\n  space: number,\n};\n\n/**\n * Stake Activation data\n *\n * @typedef {Object} StakeActivationData\n * @property {string} state: <string - the stake account's activation state, one of: active, inactive, activating, deactivating\n * @property {number} active: stake active during the epoch\n * @property {number} inactive: stake inactive during the epoch\n */\ntype StakeActivationData = {\n  state: 'active' | 'inactive' | 'activating' | 'deactivating',\n  active: number,\n  inactive: number,\n};\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {T} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo<T> = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: T,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo<Buffer>} accountInfo\n */\ntype KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @private\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature, // TransactionSignature as a base 58 string\n  callback: SignatureResultCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @private\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Signature result\n *\n * @typedef {Object} SignatureResult\n */\nexport type SignatureResult = {|\n  err: TransactionError | null,\n|};\n\n/**\n * Transaction error\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {};\n\n/**\n * Signature status\n *\n * @typedef {Object} SignatureStatus\n * @property {number} slot when the transaction was processed\n * @property {number | null} confirmations the number of blocks that have been confirmed and voted on in the fork containing `slot` (TODO)\n * @property {TransactionError | null} err error, if any\n */\nexport type SignatureStatus = {\n  slot: number,\n  confirmations: number | null,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed signature with its status\n *\n * @typedef {Object} ConfirmedSignatureInfo\n * @property {string} signature the transaction signature\n * @property {number} slot when the transaction was processed\n * @property {TransactionError | null} err error, if any\n * @property {string | null} memo memo associated with the transaction, if any\n */\nexport type ConfirmedSignatureInfo = {\n  signature: string,\n  slot: number,\n  err: TransactionError | null,\n  memo: string | null,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcEndpoint: string;\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n  _rpcWebSocketHeartbeat: IntervalID | null = null;\n  _rpcWebSocketIdleTimeout: TimeoutID | null = null;\n\n  _commitment: ?Commitment;\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    lastFetch: Date,\n    simulatedSignatures: Array<string>,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _pollingBlockhash: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n  _slotSubscriptions: {\n    [number]: SlotSubscriptionInfo,\n  } = {};\n  _slotSubscriptionCounter: number = 0;\n  _signatureSubscriptions: {\n    [number]: SignatureSubscriptionInfo,\n  } = {};\n  _signatureSubscriptionCounter: number = 0;\n  _rootSubscriptions: {\n    [number]: RootSubscriptionInfo,\n  } = {};\n  _rootSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment: ?Commitment) {\n    this._rpcEndpoint = endpoint;\n\n    let url = urlParse(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    this._rpcRequest = createRpcRequest(url.href, useHttps);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: new Date(0),\n      transactionSignatures: [],\n      simulatedSignatures: [],\n    };\n\n    url.protocol = useHttps ? 'wss:' : 'ws:';\n    url.host = '';\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): ?Commitment {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = GetBalanceAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = GetBlockTimeRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = GetSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value.nonCirculatingAccounts = res.result.value.nonCirculatingAccounts.map(\n      account => new PublicKey(account),\n    );\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = GetTokenSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = GetTokenAccountBalance(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => {\n        assert(result.account.data[1] === 'base64');\n        return {\n          pubkey: new PublicKey(result.pubkey),\n          account: {\n            executable: result.account.executable,\n            owner: new PublicKey(result.account.owner),\n            lamports: result.account.lamports,\n            data: Buffer.from(result.account.data[0], 'base64'),\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetParsedTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => ({\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: result.account.data,\n        },\n      })),\n    };\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config: ?GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = GetLargestAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(({address, lamports}) => ({\n      address: new PublicKey(address),\n      lamports,\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = GetTokenLargestAccountsResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(pair => ({\n      ...pair,\n      address: new PublicKey(pair.address),\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetAccountInfoAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data} = res.result.value;\n      assert(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>,\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetParsedAccountInfoResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data: resultData} = res.result.value;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data,\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    return await this.getAccountInfoAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n    epoch: ?number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = GetStakeActivationResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    const {state, active, inactive} = res.result;\n    return {state, active, inactive};\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>> {\n    const args = this._buildArgs([programId.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      assert(result.account.data[1] === 'base64');\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: Buffer.from(result.account.data[0], 'base64'),\n        },\n      };\n    });\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey,\n      account: AccountInfo<Buffer | ParsedAccountData>,\n    }>,\n  > {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetParsedProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      const resultData = result.account.data;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data,\n        },\n      };\n    });\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result, context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve();\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'recent':\n      case 'single':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment: ?Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = GetVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = GetSlot(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment: ?Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = GetSlotLeader(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(value.length === 1);\n    return {context, value: value[0]};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = GetSignatureStatusesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('faied to get total supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment: ?Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = GetInflationGovernorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetInflationGovernorResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment: ?Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = GetEpochInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochInfoResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = GetEpochScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochScheduleResult(res.result);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = GetLeaderScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = GetMinimumBalanceForRentExemptionRpcResult(unsafeRes);\n    if (res.error) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>,\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n\n    const res = GetRecentBlockhashAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit: ?number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n\n    const res = GetRecentPerformanceSamplesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = GetFeeCalculatorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value && value.feeCalculator,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment: ?Commitment,\n  ): Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}> {\n    return await this.getRecentBlockhashAndContext(commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error('failed to get recent blockhash: ' + e);\n      });\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = GetVersionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const res = GetConfirmedBlockRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    assert(typeof result !== 'undefined');\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return {\n      blockhash: new PublicKey(result.blockhash).toString(),\n      previousBlockhash: new PublicKey(result.previousBlockhash).toString(),\n      parentSlot: result.parentSlot,\n      transactions: result.transactions.map(result => {\n        const {message, signatures} = result.transaction;\n        return {\n          transaction: Transaction.populate(new Message(message), signatures),\n          meta: result.meta,\n        };\n      }),\n      rewards: result.rewards || [],\n    };\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n    ]);\n    const {result, error} = GetConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) {\n      return result;\n    }\n\n    const {message, signatures} = result.transaction;\n    return {\n      slot: result.slot,\n      transaction: Transaction.populate(new Message(message), signatures),\n      meta: result.meta,\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n      'jsonParsed',\n    ]);\n    const {result, error} = GetParsedConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) return result;\n\n    if (result.meta.innerInstructions) {\n      result.meta.innerInstructions.forEach(inner => {\n        inner.instructions.forEach(ix => {\n          ix.programId = new PublicKey(ix.programId);\n\n          if (ix.accounts) {\n            ix.accounts = ix.accounts.map(account => new PublicKey(account));\n          }\n        });\n      });\n    }\n\n    const {\n      accountKeys,\n      instructions,\n      recentBlockhash,\n    } = result.transaction.message;\n    return {\n      slot: result.slot,\n      meta: result.meta,\n      transaction: {\n        signatures: result.transaction.signatures,\n        message: {\n          accountKeys: accountKeys.map(accountKey => ({\n            pubkey: new PublicKey(accountKey.pubkey),\n            signer: accountKey.signer,\n            writable: accountKey.writable,\n          })),\n          instructions: instructions.map(ix => {\n            let mapped: any = {programId: new PublicKey(ix.programId)};\n            if ('accounts' in ix) {\n              mapped.accounts = ix.accounts.map(key => new PublicKey(key));\n            }\n\n            return {\n              ...ix,\n              ...mapped,\n            };\n          }),\n          recentBlockhash,\n        },\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress',\n      [address.toBase58(), startSlot, endSlot],\n    );\n    const result = GetConfirmedSignaturesForAddressRpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options: ?ConfirmedSignaturesForAddress2Options,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      [address.toBase58(), options],\n    );\n    const result = GetConfirmedSignaturesForAddress2RpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const expired =\n        Date.now() - this._blockhashInfo.lastFetch >=\n        BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('max');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: new Date(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Account>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n    const args = [encodedTransaction, config];\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = SimulatedTransactionResponseValidator(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Account>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * @private\n   */\n  async validatorExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('validatorExit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error('validator exit failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const args = [encodedTransaction, config];\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      if (res.error.data) {\n        const logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number) {\n    clearInterval(this._rpcWebSocketHeartbeat);\n    this._rpcWebSocketHeartbeat = null;\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  async _subscribe<SubInfo: {subscriptionId: ?SubscriptionId}, RpcArgs>(\n    sub: SubInfo,\n    rpcMethod: string,\n    rpcArgs: RpcArgs,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _unsubscribe<SubInfo: {subscriptionId: ?SubscriptionId}>(\n    sub: SubInfo,\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetSubscriptions() {\n    (Object.values(this._accountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._programAccountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._signatureSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._slotSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._rootSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @private\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      this._subscribe(\n        sub,\n        'signatureSubscribe',\n        this._buildArgs([sub.signature], sub.commitment),\n      );\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error('account notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.data[1] === 'base64');\n        sub.callback(\n          {\n            executable: value.executable,\n            owner: new PublicKey(value.owner),\n            lamports: value.lamports,\n            data: Buffer.from(value.data[0], 'base64'),\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ProgramAccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(\n        'program account notification failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.account.data[1] === 'base64');\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: {\n              executable: value.account.executable,\n              owner: new PublicKey(value.account.owner),\n              lamports: value.account.lamports,\n              data: Buffer.from(value.account.data[0], 'base64'),\n            },\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = SlotNotificationResult(notification);\n    if (res.error) {\n      throw new Error('slot notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {parent, slot, root} = res.result;\n    const keys = Object.keys(this._slotSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._slotSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback({\n          parent,\n          slot,\n          root,\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override: ?Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = SignatureNotificationResult(notification);\n    if (res.error) {\n      throw new Error('signature notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._signatureSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._signatureSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        // Signatures subscriptions are auto-removed by the RPC service so\n        // no need to explicitly send an unsubscribe message\n        delete this._signatureSubscriptions[id];\n        this._updateSubscriptions();\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = RootNotificationResult(notification);\n    if (res.error) {\n      throw new Error('root notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const root = res.result;\n    const keys = Object.keys(this._rootSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._rootSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(root);\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {Account} from '../account';\nimport type {ConfirmOptions} from '../connection';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\nexport type InstructionType = {|\n  index: number,\n  layout: typeof BufferLayout,\n|};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n */\nexport function encodeData(type: InstructionType, fields: Object): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): Object {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer system transaction params\n * @typedef {Object} TransferParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type TransferParams = {|\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Assign system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} programId\n */\nexport type AssignParams = {|\n  accountPubkey: PublicKey,\n  programId: PublicKey,\n|};\n\n/**\n * Create account with seed system transaction params\n * @typedef {Object} CreateAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Create nonce account system transaction params\n * @typedef {Object} CreateNonceAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {number} lamports\n */\nexport type CreateNonceAccountParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Create nonce account with seed system transaction params\n * @typedef {Object} CreateNonceAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n */\nexport type CreateNonceAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n  basePubkey: PublicKey,\n  seed: string,\n|};\n\n/**\n * Initialize nonce account system instruction params\n * @typedef {Object} InitializeNonceParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type InitializeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Advance nonce account system instruction params\n * @typedef {Object} AdvanceNonceParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type AdvanceNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Withdraw nonce account system transaction params\n * @typedef {Object} WithdrawNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Authorize nonce account system transaction params\n * @typedef {Object} AuthorizeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n */\nexport type AuthorizeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n|};\n\n/**\n * Allocate account system transaction params\n * @typedef {Object} AllocateParams\n * @property {PublicKey} accountPubkey\n * @property {number} space\n */\nexport type AllocateParams = {|\n  accountPubkey: PublicKey,\n  space: number,\n|};\n\n/**\n * Allocate account with seed system transaction params\n * @typedef {Object} AllocateWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type AllocateWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Assign account with seed system transaction params\n * @typedef {Object} AssignWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type AssignWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (SYSTEM_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n * @typedef {'Create' | 'Assign' | 'Transfer' | 'CreateWithSeed'\n | 'AdvanceNonceAccount' | 'WithdrawNonceAccount' | 'InitializeNonceAccount'\n | 'AuthorizeNonceAccount'} SystemInstructionType\n */\nexport type SystemInstructionType = $Keys<typeof SYSTEM_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid system InstructionType's\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('11111111111111111111111111111111');\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params: TransferParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {programId: params.programId.toBuffer()});\n    }\n\n    return new TransactionInstruction({\n      keys: [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: params.basePubkey.toBuffer(),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if (params.basePubkey && params.seed) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.authorizedPubkey.toBuffer(),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.newAuthorizedPubkey.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        space: params.space,\n        programId: params.programId.toBuffer(),\n      });\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys: [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'singleGossip',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'singleGossip',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'singleGossip',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'singleGossip',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\nexport class Authorized {\n  staker: PublicKey;\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\nexport class Lockup {\n  unixTimestamp: number;\n  epoch: number;\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n}\n\n/**\n * Create stake account transaction params\n * @typedef {Object} CreateStakeAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Create stake account with seed transaction params\n * @typedef {Object} CreateStakeAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Initialize stake instruction params\n * @typedef {Object} InitializeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n */\nexport type InitializeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n|};\n\n/**\n * Delegate stake instruction params\n * @typedef {Object} DelegateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} votePubkey\n */\nexport type DelegateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  votePubkey: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params\n * @typedef {Object} AuthorizeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n */\nexport type AuthorizeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n|};\n\n/**\n * Authorize stake instruction params using a derived key\n * @typedef {Object} AuthorizeWithSeedStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorityBase\n * @property {string} authoritySeed\n * @property {PublicKey} authorityOwner\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n */\nexport type AuthorizeWithSeedStakeParams = {|\n  stakePubkey: PublicKey,\n  authorityBase: PublicKey,\n  authoritySeed: string,\n  authorityOwner: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n|};\n\n/**\n * Split stake instruction params\n * @typedef {Object} SplitStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} splitStakePubkey\n * @property {number} lamports\n */\nexport type SplitStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  splitStakePubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Withdraw stake instruction params\n * @typedef {Object} WithdrawStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Deactivate stake instruction params\n * @typedef {Object} DeactivateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type DeactivateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (STAKE_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n * @typedef { 'Initialize' | 'Authorize' | 'AuthorizeWithSeed' | 'Delegate' | 'Split' | 'Withdraw'\n | 'Deactivate' } StakeInstructionType\n */\nexport type StakeInstructionType = $Keys<typeof STAKE_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid stake InstructionType's\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\nexport type StakeAuthorizationType = {|\n  index: number,\n|};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * Public key that identifies the Stake program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Stake11111111111111111111111111111111111111');\n  }\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static get space(): number {\n    return 200;\n  }\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: authorized.staker.toBuffer(),\n        withdrawer: authorized.withdrawer.toBuffer(),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: lockup.custodian.toBuffer(),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorityBase, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: toPubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport createKeccakHash from 'keccak';\nimport assert from 'assert';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst PUBLIC_KEY_BYTES = 65;\nconst HASHED_PUBKEY_SERIALIZED_SIZE = 20;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Create a Secp256k1 instruction using a public key params\n * @typedef {Object} CreateSecp256k1InstructionWithPublicKeyParams\n * @property {Buffer | Uint8Array | Array<number>} publicKey\n * @property {Buffer | Uint8Array | Array<number>} message\n * @property {Buffer | Uint8Array | Array<number>} signature\n * @property {number} recoveryId\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {|\n  publicKey: Buffer | Uint8Array | Array<number>,\n  message: Buffer | Uint8Array | Array<number>,\n  signature: Buffer | Uint8Array | Array<number>,\n  recoveryId: number,\n|};\n\n/**\n * Create a Secp256k1 instruction using a private key params\n * @typedef {Object} CreateSecp256k1InstructionWithPrivateKeyParams\n * @property {Buffer | Uint8Array | Array<number>} privateKey\n * @property {Buffer | Uint8Array | Array<number>} message\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {|\n  privateKey: Buffer | Uint8Array | Array<number>,\n  message: Buffer | Uint8Array | Array<number>,\n|};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethPublicKey'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * Public key that identifies the Secp256k program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('KeccakSecp256k11111111111111111111111111111');\n  }\n\n  /**\n   * Create a secp256k1 instruction with public key\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes`,\n    );\n\n    let ethPublicKey;\n    try {\n      ethPublicKey = constructEthPubkey(publicKey);\n    } catch (error) {\n      throw new Error(`Error constructing ethereum public key: ${error}`);\n    }\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethPublicKey.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethPublicKey: ethPublicKey,\n        recoveryId: recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create a secp256k1 instruction with private key\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes`,\n    );\n\n    try {\n      const publicKey = publicKeyCreate(privateKey, false);\n      const messageHash = createKeccakHash('keccak256')\n        .update(toBuffer(message))\n        .digest();\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n\nexport function constructEthPubkey(\n  publicKey: Buffer | Uint8Array | Array<number>,\n): Buffer {\n  return createKeccakHash('keccak256')\n    .update(toBuffer(publicKey.slice(1))) // throw away leading byte\n    .digest()\n    .slice(-HASHED_PUBKEY_SERIALIZED_SIZE);\n}\n","// @flow\n\nimport {struct} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @private\n */\ntype ConfigKey = {|\n  publicKey: PublicKey,\n  isSigner: boolean,\n|};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {|\n  name: string,\n  website?: string,\n  details?: string,\n  keybaseUsername?: string,\n|};\n\nconst InfoString = struct({\n  name: 'string',\n  website: 'string?',\n  details: 'string?',\n  keybaseUsername: 'string?',\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = InfoString(JSON.parse(rawInfo));\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {|\n  slot: number,\n  confirmationCount: number,\n|};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {|\n  epoch: number,\n  credits: number,\n  prevCredits: number,\n|};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    va.nodePubkey = new PublicKey(va.nodePubkey);\n    va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n    va.authorizedWithdrawerPubkey = new PublicKey(\n      va.authorizedWithdrawerPubkey,\n    );\n    if (!va.rootSlotValid) {\n      va.rootSlot = null;\n    }\n    return va;\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","//@flow\n\n/**\n * @private\n */\nconst endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","// @flow\nexport {Account} from './account';\nexport {BPF_LOADER_DEPRECATED_PROGRAM_ID} from './bpf-loader-deprecated';\nexport {BpfLoader, BPF_LOADER_PROGRAM_ID} from './bpf-loader';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {Message} from './message';\nexport {NonceAccount, NONCE_ACCOUNT_LENGTH} from './nonce-account';\nexport {MAX_SEED_LENGTH, PublicKey} from './publickey';\nexport {\n  STAKE_CONFIG_ID,\n  Authorized,\n  Lockup,\n  StakeAuthorizationLayout,\n  StakeInstruction,\n  STAKE_INSTRUCTION_LAYOUTS,\n  StakeProgram,\n} from './stake-program';\nexport {\n  SystemInstruction,\n  SystemProgram,\n  SYSTEM_INSTRUCTION_LAYOUTS,\n} from './system-program';\nexport {Secp256k1Program} from './secp256k1-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {VALIDATOR_INFO_KEY, ValidatorInfo} from './validator-info';\nexport {VOTE_PROGRAM_ID, VoteAccount} from './vote-account';\nexport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from './sysvar';\nexport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nexport {sendAndConfirmRawTransaction} from './util/send-and-confirm-raw-transaction';\nexport {clusterApiUrl} from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","from","buffer","byteOffset","byteLength","naclLowLevel","nacl","lowlevel","MAX_SEED_LENGTH","PublicKey","value","decoded","bs58","decode","length","Error","_bn","BN","publicKey","eq","encode","b","toArrayLike","zeroPad","alloc","copy","toBase58","fromPublicKey","seed","programId","concat","sha256","hash","seeds","forEach","publicKeyBytes","toArray","is_on_curve","nonce","seedsWithNonce","createProgramAddress","address","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","bind","_encode","offset","data","chars","toString","str","span","authorized","lockup","getAlloc","type","fields","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","map","account","recentBlockhash","instructions","index","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","numKeys","keyCount","shortvec","instruction","accounts","programIdIndex","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","slice","signDataLayout","Layout","transaction","keys","key","signData","byteArray","accountCount","i","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Object","assign","Transaction","signatures","signature","items","nonceInfo","nonceInstruction","unshift","feePayer","programIds","accountMetas","accountMeta","includes","pubkey","isSigner","isWritable","sort","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","equals","splice","payerMeta","console","warn","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","message","compileMessage","valid","every","pair","_compile","serialize","signers","seen","Set","filter","has","add","uniqueSigners","signer","_partialSign","_verifySignatures","detached","_addSignature","sigpair","serializeMessage","requireAllSignatures","verify","config","verifySignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","isAccountWritable","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","nonceAccount","authorizedPubkey","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","sleep","ms","Promise","resolve","setTimeout","promiseTimeout","promise","timeoutMs","timeoutId","timeoutPromise","race","then","result","clearTimeout","DESTROY_TIMEOUT_MS","AgentManager","useHttps","options","keepAlive","maxSockets","https","Agent","http","_useHttps","_agent","_newAgent","process","browser","_activeRequests","_destroyTimeout","destroy","BLOCKHASH_CACHE_TIMEOUT_MS","jsonRpcResultAndContext","resultDescription","jsonRpcResult","context","struct","slot","jsonRpcVersion","literal","union","jsonrpc","id","error","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","epoch","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","err","Version","pick","SimulatedTransactionResponseValidator","logs","array","createRpcRequest","url","agentManager","server","jayson","request","callback","agent","requestStart","method","body","headers","too_many_requests_retries","res","waitTime","fetch","status","log","statusText","text","ok","requestEnd","reject","response","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","GetBalanceAndContextRpcResult","GetBlockTimeRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","object","amount","uiAmount","decimals","GetTokenLargestAccountsResult","GetTokenAccountBalance","GetTokenSupplyRpcResult","GetTokenAccountsByOwner","executable","owner","lamports","rentEpoch","GetParsedTokenAccountsByOwner","program","parsed","space","GetLargestAccountsRpcResult","GetVersionRpcResult","AccountInfoResult","ParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetAccountInfoAndContextRpcResult","GetParsedAccountInfoResult","GetStakeActivationResult","GetConfirmedSignaturesForAddressRpcResult","GetConfirmedSignaturesForAddress2RpcResult","memo","AccountNotificationResult","subscription","ProgramAccountInfoResult","ParsedProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SignatureNotificationResult","RootNotificationResult","GetProgramAccountsRpcResult","GetParsedProgramAccountsRpcResult","GetSlot","GetSlotLeader","GetClusterNodes","gossip","tpu","rpc","version","GetVoteAccounts","current","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","tuple","commission","lastVote","rootSlot","delinquent","GetSignatureStatusesRpcResult","confirmations","GetTransactionCountRpcResult","GetTotalSupplyRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedConfirmedTransactionResult","writable","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","accountIndex","mint","uiTokenAmount","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","transactions","rewards","postBalance","rewardType","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","feeCalculator","lamportsPerSignature","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","Connection","endpoint","commitment","_rpcEndpoint","urlParse","protocol","_rpcRequest","href","_commitment","_blockhashInfo","lastFetch","Date","transactionSignatures","simulatedSignatures","host","port","String","Number","_rpcWebSocket","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSignatureNotification","_wsOnRootNotification","_buildArgs","unsafeRes","assert","getBalanceAndContext","e","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","resultData","getAccountInfoAndContext","undefined","decodedSignature","start","now","subscriptionCommitment","confirmPromise","subscriptionId","onSignature","removeSignatureListener","duration","toFixed","getSignatureStatuses","params","limit","getRecentBlockhashAndContext","inner","ix","accountKey","mapped","startSlot","endSlot","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","_pollingBlockhash","expired","_pollNewBlockhash","startTime","getRecentBlockhash","_disableBlockhashCaching","_recentBlockhash","encodedTransaction","encoding","sigVerify","sendRawTransaction","rawTransaction","sendEncodedTransaction","skipPreflight","preflightCommitment","Array","isArray","traceIndent","logTrace","join","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","setInterval","notify","_updateSubscriptions","code","clearInterval","_resetSubscriptions","sub","rpcMethod","rpcArgs","call","unsubscribeId","values","_accountChangeSubscriptions","s","_programAccountChangeSubscriptions","_signatureSubscriptions","_slotSubscriptions","_rootSubscriptions","programKeys","slotKeys","signatureKeys","rootKeys","_rpcWebSocketIdleTimeout","close","connect","_subscribe","notification","_accountChangeSubscriptionCounter","subInfo","_unsubscribe","accountId","_programAccountChangeSubscriptionCounter","_slotSubscriptionCounter","override","extra","_signatureSubscriptionCounter","_rootSubscriptionCounter","sendAndConfirmTransaction","connection","sendOptions","sendTransaction","confirmTransaction","JSON","stringify","encodeData","allocLength","layoutFields","decodeData","SystemInstruction","checkProgramId","instructionTypeLayout","typeIndex","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","Allocate","accountPubkey","AllocateWithSeed","base","basePubkey","Assign","AssignWithSeed","CreateWithSeed","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","Loader","Math","ceil","chunkSize","payer","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","allocate","transfer","dataLayout","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","Initialize","stakePubkey","Delegate","Authorize","newAuthorized","stakeAuthorizationType","AuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","Split","splitStakePubkey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","publicKeyCreate","secp256k1","ecdsaSign","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","HASHED_PUBKEY_SERIALIZED_SIZE","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","ethPublicKey","constructEthPubkey","dataStart","ethAddressOffset","signatureOffset","messageDataOffset","numSignatures","signatureInstructionIndex","ethAddressInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","messageHash","createKeccakHash","update","digest","recid","createInstructionWithPublicKey","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","info","configKeyCount","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","va","authorizedVoterPubkey","authorizedWithdrawerPubkey","rootSlotValid","sendAndConfirmRawTransaction","devnet","testnet","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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"}